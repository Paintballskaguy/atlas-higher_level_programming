# 3-say_my_name.txt
===========================
How to Use 3-say_my_name.py
===========================
This module defines a function `say_my_name(first_name, last_name="")` that prints a full name.

Usage
=====
`say_my_name(...)` prints the string `My name is <first_name> <last_name>`. If `last_name` is not provided, it defaults to an empty string.

    >>> say_my_name = __import__('3-say_my_name').say_my_name
    >>> say_my_name("John", "Smith")
    My name is John Smith

    >>> say_my_name("Walter", "White")
    My name is Walter White

    >>> say_my_name("Bob")
    My name is Bob 

Non-Strings
===========
`say_my_name()` expects that both arguments are strings. If either argument is not a string, a `TypeError` is raised.

    >>> say_my_name(12, "White")
    Traceback (most recent call last):
    TypeError: first_name must be a string

    >>> say_my_name("John", 42)
    Traceback (most recent call last):
    TypeError: last_name must be a string

Missing Arguments
=================
If the `first_name` argument is missing, a `TypeError` will be raised.

    >>> say_my_name()
    Traceback (most recent call last):
    TypeError: say_my_name() missing 1 required positional argument: 'first_name'

If both arguments are omitted, a `TypeError` is still raised for the missing `first_name`.

Edge Cases
==========
The function will handle empty strings properly.

    >>> say_my_name("Alice", "")
    My name is Alice 

    >>> say_my_name("", "Smith")
    My name is  Smith

    >>> say_my_name("", "")
    My name is  