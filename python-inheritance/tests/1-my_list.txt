=========================
How to Use MyList Class
=========================

This document defines the class ``MyList``, which inherits from the built-in ``list`` class. It includes a method ``print_sorted()`` that prints the list in ascending order.

Class Definition
================

::

    class MyList(list):
        """Inherits from the built-in list class and provides a method to print a sorted version of the list."""

        def print_sorted(self):
            """Prints the list, sorted in ascending order (without modifying the original list)."""
            print(sorted(self))


Check instantiation
===================

Here we instantiate an object of ``MyList`` and verify that it is an instance of both ``MyList`` and ``list``.

::

    >>> class MyList(list):
    ...     def print_sorted(self):
    ...         print(sorted(self))
    >>> my_list = MyList()
    >>> isinstance(my_list, MyList)
    True
    >>> isinstance(my_list, list)
    True


Check __str__
=============

We check if the ``__str__`` method correctly prints the list contents.

::

    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> print(my_list)
    [1, 4]


Check append()
==============

This test verifies the ability to append elements to the list.

::

    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> my_list.append(3)
    >>> print(my_list)
    [1, 4, 3]


Check print_sorted() with sorted append
=======================================

In this test, we ensure that ``print_sorted()`` prints the list in ascending order when the list is already sorted.

::

    >>> my_list = MyList()
    >>> my_list.extend([1, 2, 3])
    >>> my_list.print_sorted()
    [1, 2, 3]


Check print_sorted() with unsorted append
=========================================

This test checks that ``print_sorted()`` correctly sorts a list that was not appended in order.

::

    >>> my_list = MyList()
    >>> my_list.extend([4, 2, 5])
    >>> my_list.print_sorted()
    [2, 4, 5]


Check print_sorted() with negative numbers
==========================================

This test verifies that the sorting works correctly when the list contains negative numbers.

::

    >>> my_list = MyList()
    >>> my_list.extend([3, -1, 4, -5])
    >>> my_list.print_sorted()
    [-5, -1, 3, 4]


Check print_sorted() with empty list
====================================

This test ensures that ``print_sorted()`` handles an empty list without error.

::

    >>> my_list = MyList()
    >>> my_list.print_sorted()
    []


Check print_sorted() returns a new sorted list
==============================================

This test ensures that ``print_sorted()`` prints a sorted list without modifying the original list.

::

    >>> my_list = MyList()
    >>> my_list.extend([10, 3, 7])
    >>> my_list.print_sorted()
    [3, 7, 10]
    >>> print(my_list)
    [10, 3, 7]


Check reversed order list
=========================

This test verifies that ``print_sorted()`` works correctly with a reversed order list.

::

    >>> my_list = MyList()
    >>> my_list.extend([4, 3, 2, 1])
    >>> print(my_list)
    [4, 3, 2, 1]
    >>> my_list.print_sorted()
    [1, 2, 3, 4]
    >>> print(my_list)
    [4, 3, 2, 1]


Check with one negative number
==============================

This test checks the behavior of ``print_sorted()`` when the list contains one negative number.

::

    >>> my_list = MyList()
    >>> my_list.extend([4, 3, 2, 1])
    >>> my_list.append(-1)
    >>> my_list.append(5)
    >>> print(my_list)
    [4, 3, 2, 1, -1, 5]
    >>> my_list.print_sorted()
    [-1, 1, 2, 3, 4, 5]
    >>> print(my_list)
    [4, 3, 2, 1, -1, 5]


Check all negative numbers
==========================

This test ensures that ``print_sorted()`` works when the list contains all negative numbers.

::

    >>> my_list = MyList()
    >>> my_list.extend([-10, -1, -7, -2, -8])
    >>> print(my_list)
    [-10, -1, -7, -2, -8]
    >>> my_list.print_sorted()
    [-10, -8, -7, -2, -1]
    >>> print(my_list)
    [-10, -1, -7, -2, -8]


Check too many arguments
========================

This test verifies that calling ``print_sorted()`` with extra arguments raises a ``TypeError``.

::

    >>> my_list.print_sorted(1)
    Traceback (most recent call last):
    ...
    TypeError: MyList.print_sorted() takes 1 positional argument but 2 were given